/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
import spock.lang.*

class LibraryTest extends Specification {

    @Unroll
    def "test power set"() {
        when:
        int[][] powerSets = Library.powerSet([1L, 2L, 3L] as long[])

        then:
        powerSets[0] == []
        powerSets[1] == [1]
        powerSets[2] == [2]
        powerSets[3] == [1, 2]
        powerSets[4] == [3]
        powerSets[5] == [1, 3]
        powerSets[6] == [2, 3]
        powerSets[7] == [1, 2, 3]
    }


    def "find power sets of size k"() {
        when:
        int[][] powerSets = Library.powerSet([6L, 3L, 7L, 4L] as long[], 3)

        then:
        powerSets.length == 4
        powerSets.find( {it == [6, 3, 7]}) != null
        powerSets.find( {it == [6, 7, 4]}) != null
        powerSets.find( {it == [6, 3, 4]}) != null
        powerSets.find( {it == [3, 7, 4]}) != null
    }

    @Unroll
    def "find subsequences with maximum value"() {
        when:

        int[] results = Library.powerSetWithMaxValue2(input as long[], k)

        then:
        results[0] == max
        results[1] == maxModulo10To9thPowerPlus7

        where:
        input           | k  | max   | maxModulo10To9thPowerPlus7
//        [6, 3, 7, 4]    | 3  | 4     | 1
//        [1, 7, 4, 3]    | 1  | 7     | 1
//        [6, 3, 7, 4]    | 4  | 0    | 1
//        [3, 5, 6]       | 2  | 4     | 1
//        [21, 19, 22, 20] | 2  | 20   | 3
//        [9, 15, 27, 14]  | 3  | 10   | 1
//        [3, 7, 16, 32]    | 2  |  3    | 1
//        [10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] | 3 | 3 | 1
         new IntRange(1, 100).step(1)  |75 | 2 | 3
       // [1, 2, 4, 4, 7]   | 3 | 4 | 1
    }

    @Unroll
    def "should calculate a zig zag"() {
        when:
        int elementsToRemove = Library.getZigzag(values)
        values.toList().subsequences()

        then:
        elementsToRemove == expectedElmentsToRemove

        where:
        values                        |  expectedElmentsToRemove
        [4, 2, 6, 3, 10, 1] as int[]  |  0
        [5, 2, 3, 6, 1] as int[]  |  1
        [1, 2, 3, 4, 5, 6] as int[]  |  4
        [100, 99, 97, 98] as int[]  | 1
        [8, 7, 6] as int[] | 1
        [1, 3, 5] as int[] | 1
        [4, 5, 2, 1] as int[] | 1
        [1, -1, 0, 1, 5, 7, 8 ] as int[] | 4
        [1, -1, 5, 4, 7, 2] as int[]  |  0
        [] as int[]  |  0
        [-1, -2, -3, -4, -5, -6] as int[]  |  4
        [1, 2] as int[] | 0
        [1] as int[]  | 0
    }

    @Unroll
    def "should calculate points"() {
        when:
        int points = Library.getPoints(month1, month2, month3)

        then:
        points == expectedPoints

        where:
        month1   | month2  |  month3 | expectedPoints
        0        | 0       |   0     | 0
        1        | 0       |  0      | 10
        1        | 1       |  1      | 30
        5        | 5       |  5      | 150
        11       | 11       | 11    |  300
    }

}
